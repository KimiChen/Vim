:filetype on
"ble VI's compatible mode..不采用vi的兼容模式
set nocompatible
"set encoding=utf-8
set fileencoding=utf-8
"use chinese help
set helplang=cn
set noerrorbells
set vb t_vb="80"
set encoding=utf-8
"set langmenu=zh_CN.UTF-8
if has("win32")
set fileencoding=chinese
else
set fileencoding=utf-8
endif

"set gui options
if has("gui_running")
set guifont=Consolas:h14
endif

"Set mapleader
let mapleader = ","
"当输入,ss，会source一次~/.vimrc文件
map <silent> <leader>ss :source ~/.vimrc<cr>
"当输入,ee时，会打开~/.vimrc进行编辑
map <silent> <leader>ee :e ~/.vimrc<cr>
"次写入.vimrc后，都会执行这个自动命令，source一次~/.vimrc文件
"autocmd! bufwritepost .vimrc source ~/.vimrc 

" Enable syntax highlight
 syntax enable
 set syntax=todo
" " Show line number
 set nu
" " show matching bracets
 set showmatch

 " Basic editing options
 set expandtab
 set shiftwidth=2
 au FileType html,python,vim,javascript setl shiftwidth=2
 au FileType html,python,vim,javascript setl tabstop=2
 au FileType java,php setl shiftwidth=4
 au FileType java,php setl tabstop=4
 set smarttab
 set lbr
 set tw=0

 "Auto indent
 set ai
" Smart indet
 set si

 " C-style indeting
 set cindent

" Wrap lines
 set wrap

" set color schema
 colorscheme torte


" Sets how many lines of history VIM har to remember
"
 set history=400
" " Set to auto read when a file is changed from the outside
set autoread
" " Have the mouse enabled all the time:
 set mouse=a
" " Do not redraw, when running macros.. lazyredraw
 set lz
" " set 7 lines to the curors - when moving vertical..
" set so=7
" " The commandbar is 2 high
 set cmdheight=2
" " Change buffer - without saving
 set hid
 " Ignore case when searching
"  set ignorecase
 set incsearch
" " Set magic on
 set magic
 " No sound on errors.
 set noerrorbells
 set novisualbell
 set t_vb=
" " How many tenths of a second to blink
 set mat=4
" " Highlight search things
 set hlsearch

 " Turn backup off
 set nobackup
 set nowb
 set noswapfile

" smart backspace
 set backspace=start,indent,eol
" switch buffers with Tab
 map <C-Tab> :bn<CR>
 map <S-Tab> :bp<CR>
 
map <leader>ph :!phpcs -l %<CR>
 "You can obtain the completion dictionary file from:
"  http://cvs.php.net/viewvc.cgi/phpdoc/funclist.txt
"set dictionary-=/home/sampeng/.vim/funclist.txt dictionary+=/home/sampeng/.vim/funclist.txt
set dictionary-=~/.vim/funclist.txt dictionary+=~/.vim/funclist.txt

"Use the dictionary completion
set complete-=k complete+=k

"Auto completion using the TAB key
"This function determines, wether we are on
"the start of the line text(then tab indents)
"or if we want to try auto completion
function! InsertTabWrapper()
    let col=col('.')-1
    if !col || getline('.')[col-1] !~ '\k'
        return "\<TAB>"
    else
        return "\<C-N>"
    endif
endfunction

"Remap the tab key to select action with InsertTabWrapper
inoremap <tab> <c-r>=InsertTabWrapper()<CR>
"设置csope等插件
if has("cscope")
  set csprg=/usr/bin/cscope
  set csto=0
  set cst
  set nocsverb
" add any database in current directory
if filereadable("cscope.out")
  cs add cscope.out
  " else add database pointed to by environment
elseif $CSCOPE_DB != ""
  cs add $CSCOPE_DB
endif
  set csverb
  set cscopetag
  set cscopequickfix=s-,g-,c-,d-,t-,e-,f-,i-
endif
""end!
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cscope setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" => Plugin configuration

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" taglist
let Tlist_Auto_Highlight_Tag = 1
if !exists('Tlist_Auto_Open')
    let Tlist_Auto_Open = 1 
endif
let Tlist_Auto_Update = 1
let Tlist_Close_On_Select = 0
let Tlist_Compact_Format = 0
let Tlist_Display_Prototype = 0
let Tlist_Display_Tag_Scope = 1
let Tlist_Enable_Fold_Column = 0
let Tlist_Exit_OnlyWindow = 1
let Tlist_File_Fold_Auto_Close = 0
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_Hightlight_Tag_On_BufEnter = 1
let Tlist_Inc_Winwidth = 0
let Tlist_Max_Submenu_Items = 1
let Tlist_Max_Tag_Length = 30
let Tlist_Process_File_Always = 0
let Tlist_Show_Menu = 0
let Tlist_Show_One_File = 0
let Tlist_Sort_Type = "order"
let Tlist_Use_Horiz_Window = 0
let Tlist_Use_Right_Window = 1
let Tlist_WinWidth = 40
let Tlist_Ctags_CMD="/usr/local/bin/ctags"
"mappings
noremap <silent><F8> Tlist<CR>
""""""""""""""""""""""""""""""
" lookupfile setting
""""""""""""""""""""""""""""""
let g:LookupFile_MinPatLength = 2               "最少输入2个字符才开始查找
let g:LookupFile_PreserveLastPattern = 0        "不保存上次查找的字符串
let g:LookupFile_PreservePatternHistory = 1     "保存查找历史
let g:LookupFile_AlwaysAcceptFirst = 1          "回车打开第一个匹配项目
let g:LookupFile_AllowNewFiles = 0              "不允许创建不存在的文件
if filereadable("./filenametags")                "设置tag文件的名字
let g:LookupFile_TagExpr = '"./filenametags"'
endif
"nmap <silent> <leader>lk <Plug>LookupFile<CR>
nmap <silent> <leader>lU :LUBufs<CR>            
nmap <silent> <leader>lw :LUWalk<CR>
nmap <unique> <silent> <leader>lk <Plug>LookupFile
imap <unique> <expr> <silent> <leader>lk (pumvisible()?”\<C-E>”:”").”\<Esc>\<Plug>LookupFile”

"letex
" REQUIRED. This makes vim invoke latex-suite when you open a tex file.
filetype plugin on
" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse latex-suite. Set your grep
" program to alway generate a file-name.
set grepprg=grep\ -nH\ $*
" OPTIONAL: This enables automatic indentation as you type.
filetype indent on
" 让 dvi 有源代码行号
let g:Tex_CompileRule_dvi="latex -src-specials -interaction=nonstopmode $*"
let g:Tex_ViewRule_dvi="xdvi -editor 'gvim --servername latex-suite --remote-silent ' " 

:set nu
:ab sammail <sampeng87@gmail.com>
:ab requirefc require_once('FirePHPCore/FirePHP.class.php');
:ab requirefb require_once( 'FirePHPCore/fb.php' );


"定义phpcs运行方式
function! RunPhpcs()
    let l:filename=@%
    let l:phpcs_output=system('phpcs --report=csv --standard=YMC '.l:filename)
    let l:phpcs_list=split(l:phpcs_output, "\n")
    unlet l:phpcs_list[0]
    cexpr l:phpcs_list
    cwindow
endfunction

set errorformat+="%f"\\,%l\\,%c\\,%t%*[a-zA-Z]\\,"%m"
command! Phpcs execute RunPhpcs()

" For example include into your .vimrc:
 source ~/.vim/plugin/php-doc.vim
 inoremap <leader>pd <ESC>:call PhpDocSingle()<CR>i
 nnoremap <leader>pd :call PhpDocSingle()<CR>
 vnoremap <leader>pd :call PhpDocRange()<CR>
 vnoremap <leader>ps :call PhpDocClass()<CR>
 

"This includes the script and maps the combination <ctrl>+p
"to the doc functions.
:set guioptions-=T

"设置blog发送快捷键
"nnoremap <leader>bl :BlogList<CR>
"nnoremap <leader>bse :BlogSend<CR>
"nnoremap <leader>bn :BlogNew<CR>

map <F6> :NERDTreeToggle<CR>
map <F5> :NERDTreeMirror<CR>
map <F11> :Tlist<CR>
map :NERDTreeToggle
map :TlistToggle
map t :NERDTreeMirror

let NERDChristmasTree=1
let NERDTreeAutoCenter=1
"let NERDTreeBookmarksFile=$VIM.'\Data\NerdBookmarks.txt'
"let NERDTreeMouseMode=2
"let NERDTreeShowBookmarks=1
let NERDTreeShowFiles=1
let NERDTreeShowHidden=1
let NERDTreeShowLineNumbers=1
let NERDTreeWinPos='left'
let NERDTreeWinSize=31


"trinity
" Open and close all the three plugins on the same time
"nmap <F8>   :TrinityToggleAll<CR>

" Open and close the srcexpl.vim separately
"nmap <F9>   :TrinityToggleSourceExplorer<CR>

" Open and close the taglist.vim separately

" Open and close the NERD_tree.vim separately
"nmap <F11>  :TrinityToggleNERDTree<CR>

"
let OmniCpp_GlobalScopeSearch = 0
let OmniCpp_NamespaceSearch = 1

set nocp

"html自动关闭tag
au FileType xhtml,xml,html so ~/.vim/ftplugin/html_autoclosetag.vim
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascrīpt set omnifunc=javascrīptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete

"增加标签控制
":map  <F2> :tabprevious<CR>
":map  <F3> :tabnext<CR>
":map  <F1>   :tabnew .<CR>
":imap  <F2> <ESC>:tabprevious<CR>i
":imap  <F3> <ESC>:tabnext<CR>i
":imap  <F1>  <ESC>:tabnew .<CR>i

:let g:html_indent_script1 = "inc"
:let g:html_indent_style1 = "inc" 
:let g:html_indent_inctags = "html,body,head,tbody,php,volist" 

"恢复光标位置
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

let g:work_base = "/Users/kimi/Sites/Work/" 
let g:n = g:work_base . "NinjaVillage/tag_new" 

function ChangeWorkBase(dir) 
"    execute ":cd " . a:dir 
endfunction 

call ChangeWorkBase(g:work_base) 
com -nargs=1 Cdw call ChangeWorkBase(<args>)  

